import os
from flask import Flask, request, jsonify
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, Update

# ====== ENV ======
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not BOT_TOKEN:
    print("ERROR: TELEGRAM_BOT_TOKEN not set")
    raise SystemExit(1)

WEBHOOK_BASE = os.getenv("WEBHOOK_BASE")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "secret-path")
PORT = int(os.getenv("PORT", "5000"))

# ====== TELEBOT ======
bot = telebot.TeleBot(BOT_TOKEN, threaded=False)  # threaded=False ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω–æ –≤ webhook-—Ä–µ–∂–∏–º–µ

def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton('/consult'), KeyboardButton('/ua_ru'))
    markup.add(KeyboardButton('/eu_ua'), KeyboardButton('/news'))
    return markup

@bot.message_handler(commands=['start'])
def start(message):
    print(f"[BOT] received /start from {message.chat.id}")
    bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ IS-Logix Bot! üòä\n"
        "–ú—ã –ø–æ–º–æ–≥–∞–µ–º —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –º–µ–∂–¥—É –£–∫—Ä–∞–∏–Ω–æ–π, –†–æ—Å—Å–∏–µ–π, –ë–µ–ª–∞—Ä—É—Å—å—é –∏ –ï–≤—Ä–æ–ø–æ–π, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=main_menu()
    )

@bot.message_handler(commands=['consult'])
def consult(message):
    print(f"[BOT] received /consult from {message.chat.id}")
    bot.send_message(
        message.chat.id,
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ: –∫–∞–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç, –æ—Ç–∫—É–¥–∞ –∏ –∫—É–¥–∞? "
        "(–ù–∞–ø—Ä–∏–º–µ—Ä: '–î–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏–∑ –ö–∏–µ–≤–∞ –≤ –ú–æ—Å–∫–≤—É')"
    )
    bot.register_next_step_handler(message, save_lead)

def save_lead(message):
    username = message.from_user.username if getattr(message, "from_user", None) and message.from_user.username else "Unknown"
    try:
        with open('leads.txt', 'a', encoding='utf-8') as f:
            f.write(f"User: {username}, Query: {message.text}\n")
    except Exception as e:
        print(f"[leads.txt] write error: {e}")
    bot.send_message(
        message.chat.id,
        "–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ. –ü–æ–∫–∞ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç–∏: "
        "https://www.is-logix.com/section/novosti/"
    )
    bot.send_message(message.chat.id, "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é?", reply_markup=main_menu())

@bot.message_handler(commands=['ua_ru'])
def ua_ru(message):
    print(f"[BOT] received /ua_ru from {message.chat.id}")
    bot.send_message(
        message.chat.id,
        "–î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –£–∫—Ä–∞–∏–Ω—ã –≤ –†–æ—Å—Å–∏—é: –ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—é, –ø–æ–º–æ–≥–∞–µ–º —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. "
        "–ï—Å—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è. –ì–∞–π–¥: https://www.is-logix.com/section/novosti/.\n"
        "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? /consult"
    )

@bot.message_handler(commands=['eu_ua'])
def eu_ua(message):
    print(f"[BOT] received /eu_ua from {message.chat.id}")
    bot.send_message(
        message.chat.id,
        "–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –ï–≤—Ä–æ–ø—ã –≤ –£–∫—Ä–∞–∏–Ω—É: –í–∏–∑—ã, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã, –±–µ–∑–æ–ø–∞—Å–Ω–æ. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: "
        "https://www.is-logix.com/section/novosti/.\n–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: /consult"
    )

@bot.message_handler(commands=['news'])
def news(message):
    print(f"[BOT] received /news from {message.chat.id}")
    bot.send_message(
        message.chat.id,
        "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –ª–æ–≥–∏—Å—Ç–∏–∫–µ: –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–∞–Ω–∫—Ü–∏—è—Ö 2025 "
        "(https://www.is-logix.com/section/novosti/). "
        "–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: https://t.me/doki_iz_UA_v_RU_BY"
    )

@bot.message_handler(func=lambda m: True)
def fallback(message):
    print(f"[BOT] fallback from {message.chat.id}: {message.text}")
    bot.send_message(message.chat.id, "–ù–µ –ø–æ–Ω—è–ª. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.", reply_markup=main_menu())

# ====== FLASK APP ======
app = Flask(__name__)

@app.route("/", methods=["GET"])
def health():
    return jsonify(status="ok", service="is-logix-bot")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –≤–µ–±—Ö—É–∫ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è Update.de_json) ---
@app.route(f"/webhook/{WEBHOOK_SECRET}", methods=["POST"])
def webhook_secret():
    try:
        json_str = request.get_data(cache=False, as_text=True)
        print(">>> GOT UPDATE (secret):", json_str)
        update = Update.de_json(json_str)
        bot.process_new_updates([update])
    except Exception as e:
        import traceback
        print("Webhook SECRET error:", repr(e))
        traceback.print_exc()
    return "OK", 200

# --- –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø—É—Ç—å –±–µ–∑ —Å–µ–∫—Ä–µ—Ç–∞ ---
@app.route("/webhook", methods=["POST"])
def webhook_fallback():
    try:
        json_str = request.get_data(cache=False, as_text=True)
        print(">>> GOT UPDATE (fallback):", json_str)
        update = Update.de_json(json_str)
        bot.process_new_updates([update])
    except Exception as e:
        import traceback
        print("Webhook FALLBACK error:", repr(e))
        traceback.print_exc()
    return "OK", 200

def ensure_webhook():
    if not WEBHOOK_BASE:
        print("WEBHOOK_BASE not set ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é setWebhook.")
        return
    webhook_url = f"{WEBHOOK_BASE}/webhook/{WEBHOOK_SECRET}"
    try:
        bot.remove_webhook()
        bot.set_webhook(url=webhook_url, drop_pending_updates=True)
        print(f"Webhook set to: {webhook_url}")
    except Exception as e:
        print(f"Failed to set webhook: {e}")

ensure_webhook()

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=PORT)



