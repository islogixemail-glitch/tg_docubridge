# main.py ‚Äî DocuBridge Bot (Flask + TeleBot + OpenAI + Postgres)
# –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–∞ Render: gunicorn main:app --timeout 120

import os
import re
import json
import traceback
from typing import Optional, Dict, Tuple
from datetime import datetime

from flask import Flask, request, jsonify
from dotenv import load_dotenv

# –í–ê–ñ–ù–û: –≥—Ä—É–∑–∏–º .env –î–û —á—Ç–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
load_dotenv()

import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, Update

import psycopg2
import psycopg2.extras

from openai import OpenAI

# ---------- ENV ----------
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not BOT_TOKEN:
    print("ERROR: TELEGRAM_BOT_TOKEN not set")
    raise SystemExit(1)

DB_URL = os.getenv("DATABASE_URL")
if not DB_URL:
    print("WARNING: DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ")

WEBHOOK_BASE = os.getenv("WEBHOOK_BASE")  # –Ω–∞–ø—Ä.: https://tg-docubridge.onrender.com
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "secret-path")
PORT = int(os.getenv("PORT", "5000"))

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
if not OPENAI_API_KEY:
    print("WARNING: OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω ‚Äî —É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã")

ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))  # –≤–∞—à –ª–∏—á–Ω—ã–π chat_id –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# ---------- App / Bot / OpenAI ----------
app = Flask(__name__)
bot = telebot.TeleBot(BOT_TOKEN, threaded=False)
client = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None
print(f"[OpenAI] client is {'ON' if client else 'OFF'}")

# ---------- DB helpers ----------
def get_conn():
    if not DB_URL:
        return None
    return psycopg2.connect(DB_URL)

def ensure_tables():
    if not DB_URL:
        return
    try:
        conn = get_conn()
        cur = conn.cursor()
        cur.execute("""
        CREATE TABLE IF NOT EXISTS chat_history (
            id BIGSERIAL PRIMARY KEY,
            chat_id BIGINT NOT NULL,
            user_message TEXT,
            bot_reply TEXT,
            timestamp TIMESTAMPTZ DEFAULT NOW()
        );
        CREATE TABLE IF NOT EXISTS user_state (
            chat_id BIGINT PRIMARY KEY,
            state TEXT NOT NULL DEFAULT 'greeting',
            data JSONB DEFAULT '{}'::jsonb,
            updated_at TIMESTAMPTZ DEFAULT NOW()
        );
        CREATE TABLE IF NOT EXISTS leads (
            id BIGSERIAL PRIMARY KEY,
            chat_id BIGINT NOT NULL,
            payload JSONB NOT NULL,
            created_at TIMESTAMPTZ DEFAULT NOW()
        );
        """)
        conn.commit()
        cur.close()
        conn.close()
        print("[DB] ensure_tables OK")
    except Exception as e:
        print(f"[DB] ensure_tables error: {e}")

def save_message(chat_id: int, user_text: Optional[str], bot_reply: Optional[str]):
    # –ü–∏—à–µ–º –∏—Å—Ç–æ—Ä–∏—é
    try:
        if DB_URL:
            conn = get_conn()
            cur = conn.cursor()
            cur.execute("""
                INSERT INTO chat_history (chat_id, user_message, bot_reply)
                VALUES (%s, %s, %s)
            """, (int(chat_id), user_text, bot_reply))
            conn.commit()
            cur.close()
            conn.close()
    except Exception as e:
        print(f"[DB] save_message error: {e}")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (–∫–æ—Ä–æ—Ç–∫–∏–π –ª–æ–≥ –¥–∏–∞–ª–æ–≥–∞)
    try:
        if ADMIN_CHAT_ID:
            u = f"üë§{chat_id}: {user_text}" if user_text else None
            b = f"ü§ñBot: {bot_reply}" if bot_reply else None
            lines = [l for l in [u, b] if l]
            if lines:
                bot.send_message(ADMIN_CHAT_ID, "\n".join(lines))
    except Exception as e:
        print(f"[ADMIN notify] save_message notify error: {e}")

def get_state(chat_id: int) -> Tuple[str, Dict]:
    try:
        if not DB_URL:
            return ("greeting", {})
        conn = get_conn()
        cur = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
        cur.execute("SELECT state, data FROM user_state WHERE chat_id=%s", (int(chat_id),))
        row = cur.fetchone()
        cur.close()
        conn.close()
        if row:
            return row["state"], (row["data"] or {})
        return ("greeting", {})
    except Exception as e:
        print(f"[DB] get_state error: {e}")
        return ("greeting", {})

def set_state(chat_id: int, state: str):
    try:
        if not DB_URL:
            return
        conn = get_conn()
        cur = conn.cursor()
        cur.execute("""
            INSERT INTO user_state (chat_id, state, data, updated_at)
            VALUES (%s, %s, %s, NOW())
            ON CONFLICT (chat_id) DO UPDATE
            SET state=EXCLUDED.state, updated_at=NOW()
        """, (int(chat_id), state, json.dumps({})))
        conn.commit()
        cur.close()
        conn.close()
    except Exception as e:
        print(f"[DB] set_state error: {e}")

def update_data(chat_id: int, new_data: Dict):
    try:
        if not DB_URL:
            return
        conn = get_conn()
        cur = conn.cursor()
        cur.execute("""
            INSERT INTO user_state (chat_id, state, data, updated_at)
            VALUES (%s, %s, %s, NOW())
            ON CONFLICT (chat_id) DO UPDATE
            SET data=EXCLUDED.data, updated_at=NOW()
        """, (int(chat_id), "collecting", json.dumps(new_data)))
        conn.commit()
        cur.close()
        conn.close()
    except Exception as e:
        print(f"[DB] update_data error: {e}")

# ---------- OpenAI logic ----------
def generate_chatgpt_response(user_message: str, chat_id: int) -> str:
    if not client:
        return "–°–µ–π—á–∞—Å —É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å ‚Äî –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∏ –ø–æ–º–æ–∂–µ—Ç."
    try:
        r = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": (
                    "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ª–æ–≥–∏—Å—Ç–∏–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –º–µ–∂–¥—É –£–∫—Ä–∞–∏–Ω–æ–π, –†–æ—Å—Å–∏–µ–π, –ë–µ–ª–∞—Ä—É—Å—å—é –∏ –ï–≤—Ä–æ–ø–æ–π. "
                    "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º —Ç–æ–Ω–æ–º. "
                    "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –æ –¥–æ—Å—Ç–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ‚Äî –¥–∞–≤–∞–π —á—ë—Ç–∫–∏–µ —à–∞–≥–∏, —Å—Ä–æ–∫–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö (–±–µ–∑ –ø–∞—Å–ø–æ—Ä—Ç–æ–≤/—Ü–µ–Ω–Ω–æ—Å—Ç–µ–π/—Ç–æ–≤–∞—Ä–æ–≤)."
                )},
                {"role": "user", "content": user_message}
            ],
            temperature=0.7,
            max_tokens=600
        )
        return r.choices[0].message.content.strip()
    except Exception as e:
        print(f"[OpenAI] error: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–∞—É–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."

# ---------- –ü–æ–ª—è –∑–∞—è–≤–∫–∏ ----------
REQUIRED_FIELDS = [
    "doc_type",
    "from_country", "from_city",
    "to_country", "to_city",
    "pages_a4", "weight_grams",
    "urgency",
    "name", "phone", "email", "best_time"
]

# ---------- –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —á–∏—Å–µ–ª ----------
RUS_NUMS = {
    "–Ω–æ–ª—å":0,"–æ–¥–∏–Ω":1,"–¥–≤–∞":2,"—Ç—Ä–∏":3,"—á–µ—Ç—ã—Ä–µ":4,"–ø—è—Ç—å":5,"—à–µ—Å—Ç—å":6,"—Å–µ–º—å":7,"–≤–æ—Å–µ–º—å":8,"–¥–µ–≤—è—Ç—å":9,
    "–¥–µ—Å—è—Ç—å":10,"–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å":11,"–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å":12,"—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å":13,"—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å":14,"–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å":15,
    "—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å":16,"—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å":17,"–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å":18,"–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å":19,
    "–¥–≤–∞–¥—Ü–∞—Ç—å":20,"—Ç—Ä–∏–¥—Ü–∞—Ç—å":30,"—Å–æ—Ä–æ–∫":40,"–ø—è—Ç—å–¥–µ—Å—è—Ç":50,"—à–µ—Å—Ç—å–¥–µ—Å—è—Ç":60,"—Å–µ–º—å–¥–µ—Å—è—Ç":70,"–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç":80,"–¥–µ–≤—è–Ω–æ—Å—Ç–æ":90,
    "—Å—Ç–æ":100
}

def parse_int_from_text(text: str) -> Optional[int]:
    if not text:
        return None
    s = text.strip().lower()
    # 1) —Ü–∏—Ñ—Ä—ã
    m = re.search(r"\d+", s)
    if m:
        try:
            return int(m.group())
        except:
            pass
    # 2) —Å–ª–æ–≤–∞ (¬´–¥–≤–∞–¥—Ü–∞—Ç—å –ø—è—Ç—å¬ª, ¬´–¥–µ—Å—è—Ç—å¬ª, ¬´–¥–æ –¥–µ—Å—è—Ç–∏¬ª)
    tokens = re.findall(r"[–∞-—è—ë]+", s)
    total = 0
    last = 0
    had_word = False
    for t in tokens:
        if t in RUS_NUMS:
            had_word = True
            val = RUS_NUMS[t]
            # ¬´–¥–≤–∞–¥—Ü–∞—Ç—å –ø—è—Ç—å¬ª ‚Üí 20 + 5
            if val >= 20 and val % 10 == 0:
                last = val
            else:
                if last:
                    total += last + val
                    last = 0
                else:
                    total += val
    if had_word:
        return total if total > 0 else (last if last > 0 else None)
    return None

# ---------- –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è/–≤–∞–ª–∏–¥–∞—Ü–∏—è ----------
def calc_weight_if_needed(d: Dict) -> Dict:
    try:
        pages = int(d.get("pages_a4") or 0)
    except:
        pages = 0
    w = d.get("weight_grams")
    if (not w or int(w) == 0) and pages > 0:
        # ~6 –≥/–ª–∏—Å—Ç, –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫ –∫—Ä–∞—Ç–Ω–æ–º—É 6 –≥
        d["weight_grams"] = int((pages * 6 + 5) // 6 * 6)
    return d

def normalize_and_validate(d: Dict) -> Tuple[Dict, list]:
    errors = []
    # –°—Ç—Ä–∞–Ω—ã ‚Äî —Ç–æ–ª—å–∫–æ –£–∫—Ä–∞–∏–Ω–∞ / –†–æ—Å—Å–∏—è / –ë–µ–ª–∞—Ä—É—Å—å
    allowed_countries = {"–£–∫—Ä–∞–∏–Ω–∞", "–†–æ—Å—Å–∏—è", "–ë–µ–ª–∞—Ä—É—Å—å"}
    for k in ["from_country", "to_country"]:
        v = (str(d.get(k) or "")).strip().title()
        if v and v not in allowed_countries:
            errors.append(f"{k}: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å—Ç—Ä–∞–Ω–∞")
            d[k] = ""
        else:
            d[k] = v

    # –¢–µ–ª–µ—Ñ–æ–Ω ‚Äî —Ç–æ–ª—å–∫–æ +380 / +7 / +375
    phone = (str(d.get("phone") or "")).strip()
    if phone and not (phone.startswith("+380") or phone.startswith("+7") or phone.startswith("+375")):
        errors.append("phone: —Ñ–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +380 / +7 / +375")
        d["phone"] = ""

    # –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Ç–∏–ø—ã (–ø–∞—Å–ø–æ—Ä—Ç/—Ç–æ–≤–∞—Ä—ã/—Ü–µ–Ω–Ω–æ—Å—Ç–∏/–¥–µ–Ω—å–≥–∏)
    bad_keywords = ["–ø–∞—Å–ø–æ—Ä—Ç", "passport", "—Ç–æ–≤–∞—Ä", "–¥–µ–Ω—å–≥–∏", "–≤–∞–ª—é", "—Ü–µ–Ω–Ω"]
    doc = (str(d.get("doc_type") or "")).lower()
    if any(b in doc for b in bad_keywords):
        errors.append("doc_type: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø (–ø–∞—Å–ø–æ—Ä—Ç/—Ç–æ–≤–∞—Ä—ã/—Ü–µ–Ω–Ω–æ—Å—Ç–∏)")
        d["doc_type"] = ""

    # –ê–≤—Ç–æ–ø–æ–¥—Å—á—ë—Ç –≤–µ—Å–∞ –ø–æ –ª–∏—Å—Ç–∞–º
    d = calc_weight_if_needed(d)
    return d, errors

def is_complete(d: Dict) -> bool:
    for k in REQUIRED_FIELDS:
        if k not in d or d[k] in (None, "", 0):
            return False
    return True

# ---------- –≠–∫—Å—Ç—Ä–∞–∫—Ü–∏—è –ø–æ–ª–µ–π —á–µ—Ä–µ–∑ OpenAI (JSON) ----------
def extract_fields_via_openai(text: str, current_data: Dict) -> Dict:
    """–ü—Ä–æ—Å–∏–º OpenAI –≤–µ—Ä–Ω—É—Ç—å –¢–û–õ–¨–ö–û JSON —Å –Ω—É–∂–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏."""
    if not client:
        return {}
    try:
        sys = (
            "–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON —Å –∫–ª—é—á–∞–º–∏:\n"
            "{\n"
            '  "doc_type": "",\n'
            '  "from_country": "", "from_city": "",\n'
            '  "to_country": "",   "to_city": "",\n'
            '  "pages_a4": 0, "weight_grams": 0,\n'
            '  "urgency": "",\n'
            '  "name": "", "phone": "", "email": "",\n'
            '  "best_time": ""\n'
            "}\n"
            "–ü—Ä–∞–≤–∏–ª–∞:\n"
            "- –°—Ç—Ä–∞–Ω—ã: —Ç–æ–ª—å–∫–æ –£–∫—Ä–∞–∏–Ω–∞/–†–æ—Å—Å–∏—è/–ë–µ–ª–∞—Ä—É—Å—å (–∏–Ω–∞—á–µ –æ—Å—Ç–∞–≤—å –ø—É—Å—Ç–æ).\n"
            "- –ù–ï –ø–∞—Å–ø–æ—Ä—Ç–∞/—Ç–æ–≤–∞—Ä—ã/–¥–µ–Ω—å–≥–∏/—Ü–µ–Ω–Ω–æ—Å—Ç–∏ ‚Äî —Ç–∞–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º–∏.\n"
            "- –¢–µ–ª–µ—Ñ–æ–Ω: —Ç–æ–ª—å–∫–æ +380 / +7 / +375 ‚Äî –∏–Ω–∞—á–µ –ø—É—Å—Ç–æ.\n"
            "- –ï—Å–ª–∏ pages_a4 > 0 –∏ weight_grams == 0 ‚Üí weight_grams ‚âà pages_a4*6.\n"
            "–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –≤–æ–∫—Ä—É–≥."
        )
        user = (
            f"UserMsg: {text}\n"
            "Current state:\n" +
            "\n".join([f"{k}={current_data.get(k)}" for k in REQUIRED_FIELDS])
        )
        r = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "system", "content": sys},
                      {"role": "user", "content": user}],
            temperature=0.2,
            max_tokens=400
        )
        raw = r.choices[0].message.content.strip()
        try:
            parsed = json.loads(raw)
        except Exception:
            s = raw.find("{"); e = raw.rfind("}")
            parsed = json.loads(raw[s:e+1]) if s >= 0 and e >= 0 else {}
        return parsed if isinstance(parsed, dict) else {}
    except Exception as e:
        print(f"[OpenAI extract] error: {e}")
        return {}

# ---------- Tariff & ETA ----------
TARIFF_TABLE = [
    (50, 60),   # ‚â§50 –≥ ‚Üí ‚Ç¨60
    (100, 65),  # ‚â§100 –≥ ‚Üí ‚Ç¨65
    (500, 85),  # ‚â§500 –≥ ‚Üí ‚Ç¨85
]
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¥–ª—è –†–§/–†–ë ‚Üí UA –¥–µ–π—Å—Ç–≤—É–µ—Ç –æ—Ñ—Ñ–µ—Ä "–æ—Ç ‚Ç¨50" –¥–ª—è –≤–µ—Å–∞ ‚â§50 –≥.

def pick_base_price(weight_grams: int) -> Tuple[Optional[int], Optional[int]]:
    """–í–µ—Ä–Ω—ë—Ç (base_price, threshold) –∏–ª–∏ (None, None) –µ—Å–ª–∏ >500 –≥."""
    try:
        w = int(weight_grams or 0)
    except:
        w = 0
    for threshold, price in TARIFF_TABLE:
        if w <= threshold:
            return price, threshold
    return None, None  # >500 –≥ ‚Äî –ø–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—é

def compute_tariff_and_eta(d: Dict) -> Dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    {
      "price_eur": int|None,
      "threshold_g": int|None,
      "eta_text": str,
      "notes": str|None
    }
    """
    from_c = (d.get("from_country") or "").strip().title()
    to_c   = (d.get("to_country")   or "").strip().title()
    weight = int(d.get("weight_grams") or 0)

    base_price, threshold = pick_base_price(weight)

    # –°—Ä–æ–∫–∏
    if from_c == "–£–∫—Ä–∞–∏–Ω–∞" and to_c == "–†–æ—Å—Å–∏—è":
        eta = "27‚Äì29 –¥–Ω–µ–π"
    elif from_c == "–£–∫—Ä–∞–∏–Ω–∞" and to_c == "–ë–µ–ª–∞—Ä—É—Å—å":
        eta = "21‚Äì23 –¥–Ω—è"
    elif (from_c in {"–†–æ—Å—Å–∏—è", "–ë–µ–ª–∞—Ä—É—Å—å"} and to_c == "–£–∫—Ä–∞–∏–Ω–∞"):
        eta = "—É—Ç–æ—á–Ω–∏–º –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ (–æ—Ä–∏–µ–Ω—Ç–∏—Ä: 21‚Äì29 –¥–Ω–µ–π)"
    else:
        eta = "—Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞"

    price = base_price
    notes = None

    # –°–ø–µ—Ü-–º–∏–Ω–∏–º—É–º "–æ—Ç ‚Ç¨50" –¥–ª—è –†–§/–†–ë ‚Üí UA (‚â§50 –≥)
    if (from_c in {"–†–æ—Å—Å–∏—è", "–ë–µ–ª–∞—Ä—É—Å—å"} and to_c == "–£–∫—Ä–∞–∏–Ω–∞") and threshold == 50:
        price = 50
        notes = "—Å–ø–µ—Ü-—Ç–∞—Ä–∏—Ñ –¥–ª—è –†–§/–†–ë ‚Üí UA (–¥–æ 50 –≥)"

    if base_price is None:
        return {
            "price_eur": None,
            "threshold_g": None,
            "eta_text": eta,
            "notes": "–≤–µ—Å —Å–≤—ã—à–µ 500 –≥ ‚Äî —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ"
        }

    return {
        "price_eur": price,
        "threshold_g": threshold,
        "eta_text": eta,
        "notes": notes
    }

def notify_admin_lead(chat_id: int, payload: Dict):
    if not ADMIN_CHAT_ID:
        return
    try:
        quote = compute_tariff_and_eta(payload)
        price_line = (
            f"–û—Ü–µ–Ω–∫–∞: ‚Ç¨{quote['price_eur']} (–¥–æ {quote['threshold_g']} –≥)"
            if quote.get("price_eur") is not None else
            "–û—Ü–µ–Ω–∫–∞: –ø–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—é (>500 –≥)"
        )
        eta_line = f"–°—Ä–æ–∫: {quote['eta_text']}"
        note_line = f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {quote['notes']}" if quote.get("notes") else None

        summary_lines = [
            "üü¢ *–ù–æ–≤—ã–π –ª–∏–¥ (DocuBridge)*",
            f"Chat ID: `{chat_id}`",
            "",
            f"–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {payload.get('doc_type') or '‚Äî'}",
            f"–ú–∞—Ä—à—Ä—É—Ç: {payload.get('from_country')}/{payload.get('from_city')} ‚Üí "
            f"{payload.get('to_country')}/{payload.get('to_city')}",
            f"–õ–∏—Å—Ç–æ–≤ A4: {payload.get('pages_a4') or 0}, –≤–µ—Å ‚âà {payload.get('weight_grams') or 0} –≥",
            f"–°—Ä–æ—á–Ω–æ—Å—Ç—å: {payload.get('urgency') or '‚Äî'}",
            "",
            f"–ò–º—è: {payload.get('name') or '‚Äî'}",
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {payload.get('phone') or '‚Äî'}",
            f"Email: {payload.get('email') or '‚Äî'}",
            f"–õ—É—á—à–µ–µ –≤—Ä–µ–º—è —Å–≤—è–∑–∏: {payload.get('best_time') or '‚Äî'}",
            "",
            price_line,
            eta_line
        ]
        if note_line:
            summary_lines.append(note_line)

        bot.send_message(ADMIN_CHAT_ID, "\n".join(summary_lines), parse_mode="Markdown")
    except Exception as e:
        print(f"[ADMIN notify] lead notify error: {e}")

# ---------- UI ----------
def main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("/consult"))
    kb.add(KeyboardButton("/news"))
    return kb

# ---------- Handlers ----------
@bot.message_handler(commands=['start'])
def start(message):
    reply = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ IS-Logix DocuBridge! üá∏üá∞üìÑ\n"
        "–ü–æ–º–æ–∂–µ–º —Å –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –º–µ–∂–¥—É –£–∫—Ä–∞–∏–Ω–æ–π, –†–æ—Å—Å–∏–µ–π –∏ –ë–µ–ª–∞—Ä—É—Å—å—é —á–µ—Ä–µ–∑ –°–ª–æ–≤–∞–∫–∏—é.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ /consult —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞—Å—á—ë—Ç –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏."
    )
    save_message(message.chat.id, "/start", reply)
    bot.send_message(message.chat.id, reply, reply_markup=main_menu())

@bot.message_handler(commands=['consult'])
def consult(message):
    set_state(message.chat.id, "collecting")
    # —Å–±—Ä–æ—Å –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è
    update_data(message.chat.id, {"_expected": None})
    q = "–ù–∞—á–Ω—ë–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ üìã\n–ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É: —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –º–∞—Ä—à—Ä—É—Ç (–æ—Ç–∫—É–¥–∞ ‚Üí –∫—É–¥–∞)."
    save_message(message.chat.id, "/consult", q)
    bot.send_message(message.chat.id, q)

@bot.message_handler(commands=['news'])
def news(message):
    reply = (
        "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –ª–æ–≥–∏—Å—Ç–∏–∫–µ –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: "
        "https://t.me/DocuBridgeInfo\n"
        "–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ –≤–∞—à–µ–≥–æ –∫–µ–π—Å–∞? –ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞, –ø–æ–¥—Å–∫–∞–∂—É."
    )
    save_message(message.chat.id, "/news", reply)
    bot.send_message(message.chat.id, reply, reply_markup=main_menu())

# –¢–µ—Å—Ç OpenAI: –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
@bot.message_handler(commands=['ai'])
def ai_ping(message):
    reply = generate_chatgpt_response("–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: OK", message.chat.id)
    save_message(message.chat.id, "/ai", reply)
    bot.send_message(message.chat.id, f"AI: {reply}")

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç
@bot.message_handler(func=lambda m: True)
def fallback(message):
    print(f"[BOT] fallback from {message.chat.id}: {message.text}")
    state, data = get_state(message.chat.id)
    user_text = (message.text or "").strip()

    try:
        bot.send_chat_action(message.chat.id, 'typing')
    except:
        pass

    if state == "collecting":
        data = data or {}
        expected = data.get("_expected")

        local: Dict = {}

        # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä —á–∏—Å–µ–ª, –µ—Å–ª–∏ –∂–¥—ë–º —á–∏—Å–ª–æ–≤–æ–µ –ø–æ–ª–µ
        if expected in ("pages_a4", "weight_grams"):
            n = parse_int_from_text(user_text)
            if n is not None and n > 0:
                local[expected] = n

        # 1) –≠–∫—Å—Ç—Ä–∞–∫—Ü–∏—è –∏ —Å–ª–∏—è–Ω–∏–µ
        extracted = extract_fields_via_openai(user_text, data)
        merged = {**(data or {}), **(extracted or {}), **local}

        # 2) –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è/–≤–∞–ª–∏–¥–∞—Ü–∏—è
        merged, val_errors = normalize_and_validate(merged)
        update_data(message.chat.id, merged)

        # 3) –ì–æ—Ç–æ–≤ –∫–æ–º–ø–ª–µ–∫—Ç?
        if is_complete(merged) and not val_errors:
            # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–∏–¥
            try:
                if DB_URL:
                    conn = get_conn()
                    cur = conn.cursor()
                    cur.execute(
                        "INSERT INTO leads (chat_id, payload) VALUES (%s, %s)",
                        (int(message.chat.id), psycopg2.extras.Json(merged))
                    )
                    conn.commit()
                    cur.close()
                    conn.close()
            except Exception as e:
                print(f"[DB] INSERT lead error: {e}")

            # —Ä–∞—Å—á—ë—Ç –∫–≤–æ—Ç—ã
            quote = compute_tariff_and_eta(merged)
            price_line = (
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: ‚Ç¨{quote['price_eur']} (–¥–æ {quote['threshold_g']} –≥)"
                if quote.get("price_eur") is not None else
                "–°—Ç–æ–∏–º–æ—Å—Ç—å: –ø–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—é (>500 –≥)"
            )
            eta_line = f"–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: {quote['eta_text']}"

            # —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            notify_admin_lead(message.chat.id, merged)

            reply = (
                "‚úÖ –°–ø–∞—Å–∏–±–æ! –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã.\n"
                f"–ú–∞—Ä—à—Ä—É—Ç: {merged.get('from_city')}, {merged.get('from_country')} ‚Üí "
                f"{merged.get('to_city')}, {merged.get('to_country')}\n"
                f"–õ–∏—Å—Ç–æ–≤ A4: {merged.get('pages_a4')} (‚âà {merged.get('weight_grams')} –≥)\n"
                f"{price_line}\n"
                f"{eta_line}\n\n"
                f"–°–≤—è–∑–∞—Ç—å—Å—è: {merged.get('name')}, {merged.get('phone')}, {merged.get('email')} "
                f"({merged.get('best_time')})\n\n"
                "–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ."
            )
            save_message(message.chat.id, user_text, reply)
            bot.send_message(message.chat.id, reply, reply_markup=main_menu())
            set_state(message.chat.id, "completed")
            return

        # 4) –ï—â—ë –Ω–µ –≤—Å—ë ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ
        questions = {
            "doc_type": "–ö–∞–∫–æ–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, –¥–∏–ø–ª–æ–º, —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ)",
            "from_country": "–ò–∑ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º? (–£–∫—Ä–∞–∏–Ω–∞/–†–æ—Å—Å–∏—è/–ë–µ–ª–∞—Ä—É—Å—å)",
            "from_city": "–ò–∑ –∫–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º?",
            "to_country": "–í –∫–∞–∫—É—é —Å—Ç—Ä–∞–Ω—É –¥–æ—Å—Ç–∞–≤–ª—è–µ–º? (–£–∫—Ä–∞–∏–Ω–∞/–†–æ—Å—Å–∏—è/–ë–µ–ª–∞—Ä—É—Å—å)",
            "to_city": "–í –∫–∞–∫–æ–π –≥–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–ª—è–µ–º?",
            "pages_a4": "–°–∫–æ–ª—å–∫–æ –ª–∏—Å—Ç–æ–≤ A4? (—á–∏—Å–ª–æ)",
            "weight_grams": "–ï—Å–ª–∏ –∑–Ω–∞–µ—Ç–µ —Ç–æ—á–Ω—ã–π –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö ‚Äî —É–∫–∞–∂–∏—Ç–µ, –∏–Ω–∞—á–µ –æ—Å—Ç–∞–≤–∏–º –ø–æ —Ä–∞—Å—á—ë—Ç—É.",
            "urgency": "–°—Ä–æ—á–Ω–æ—Å—Ç—å: –æ–±—ã—á–Ω–∞—è –∏–ª–∏ —Å—Ä–æ—á–Ω–∞—è?",
            "name": "–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è (–∏–º—è/—Ñ–∞–º–∏–ª–∏—è)?",
            "phone": "–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (+380 / +7 / +375):",
            "email": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞:",
            "best_time": "–ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–µ–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–≤–æ–Ω–æ–∫/—Å–æ–æ–±—â–µ–Ω–∏–µ?"
        }

        next_key = None
        for key in REQUIRED_FIELDS:
            if not merged.get(key):
                next_key = key
                break

        if val_errors and not next_key:
            # –ø–æ–ª—è –µ—Å—Ç—å, –Ω–æ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ ‚Äî –ø–æ–ø—Ä–æ—Å–∏–º —É—Ç–æ—á–Ω–∏—Ç—å
            q = "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏: " + "; ".join(val_errors) + ". –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."
            save_message(message.chat.id, user_text, q)
            bot.send_message(message.chat.id, q)
            # –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ (–µ—Å–ª–∏ –∫–∞—Å–∞–µ—Ç—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è)
            if "phone" in ";".join(val_errors).lower():
                merged["_expected"] = "phone"
            update_data(message.chat.id, merged)
            return

        if next_key:
            q = questions[next_key]
            merged["_expected"] = next_key
            update_data(message.chat.id, merged)
            save_message(message.chat.id, user_text, q)
            bot.send_message(message.chat.id, q)
            return

    # --- –Ω–µ —Ä–µ–∂–∏–º —Å–±–æ—Ä–∞: –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç GPT ---
    reply = generate_chatgpt_response(user_text, message.chat.id)
    save_message(message.chat.id, user_text, reply)
    bot.send_message(message.chat.id, reply, reply_markup=main_menu())

# ---------- Webhook ----------
@app.route("/", methods=["GET"])
def index():
    return "OK", 200

@app.route(f"/webhook/{WEBHOOK_SECRET}", methods=["POST"])
def telegram_webhook():
    try:
        if request.headers.get("content-type") == "application/json":
            json_str = request.get_data().decode("utf-8")
            update = Update.de_json(json.loads(json_str))
            bot.process_new_updates([update])
        else:
            print("[Webhook] Unsupported content-type")
    except Exception as e:
        print("[Webhook] error:", e)
        traceback.print_exc()
    return "OK", 200

def ensure_webhook():
    try:
        if not WEBHOOK_BASE:
            print("WARNING: WEBHOOK_BASE –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –≤–µ–±—Ö—É–∫ –Ω–µ –±—É–¥–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω")
            return
        url = f"{WEBHOOK_BASE}/webhook/{WEBHOOK_SECRET}"
        bot.remove_webhook()
        ok = bot.set_webhook(url=url, drop_pending_updates=True)
        if ok:
            print(f"Webhook set to: {url}")
        else:
            print("ERROR: set_webhook returned False")
    except Exception as e:
        print(f"[Webhook] set error: {e}")

# ---------- Entrypoint ----------
ensure_tables()
ensure_webhook()

if __name__ == "__main__":
    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤): python main.py
    app.run(host="0.0.0.0", port=PORT, debug=False)


